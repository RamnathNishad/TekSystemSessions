MVC::- Model-View-Controller is a design pattern for developing application to have more modularity and testability and reusability of the code. Separation of responsibility is better.


Model:- Data models representing the application entities and Data Access Layer
View:- Html response as an output
Controller:- Processing the request coming from user and return response like View+Data(Model)


user---->request---->Controller--->Action methods---->uses Model---->Return View--->Response

Types of Views:-
a) weakly-typed views:- no model is binded with the view
b) strongly-typed views:- model is binded with the view. At the top view file we have the line:
					@model <model-classname>

How to pass data from Action to View:-
1) ViewData:- It is a dictionary using key/value pass from action method to its view.  Scope is from action to its view not to the other action or view
-While accessing we need to type-cast before accessing.

2) ViewBag:- It is also passed using key/value and with same scope as ViewData ie. can be accessed from action to only its view. It is dynamic type hence while accessing no need to type-case but no intelligence will be there since its type is dynamic.

3) TempData:- It is also with key/value pair but scope is across controllers and action/views but it is removed from the memory as soon as it is accessed. This is default behavior but if u want to retain while accessing, we need to call TempData.Keep() --to retain all keys or TempData.Keep("key") to retain a particular key. Need type-casting while accessing.


=============================EntityFramework Core Data-Access Layer===================================
-ADO.NET ----Data Access component but  there is lot of abstraction of database object from developers and ADO.NET codes are tightly coupled with application code.

CRUD------->
	cmd----->select ecode, ename,salary from tbl_employee-------------------------<database table (ecode,empname,salary))

	class model----->ecode,ename,salary,deptid


EF------>Open-source ORM (Object-Relational Mapping) tool----->It maps the tables into application models so developers can do modifications in the model or/and tables without much worry and EF will take care of mapping between them.

model----ecode---------------ORM  mapper-------------------dabatase(id)

EF Core has two approaches:-
1) Database-first approach:- already database is there and models will be defined as per tables and objects
2) Code-first approach:- first models and database context class is defined and using EF Core database and tables are generated.
It is done using database migration commands.

EF Core-----ORM + Linq syntax(for DML and QUERIES)

App(Console,WEB(MVC,WEB API))---------->DataAccessLayer------>EF Core/ADO.NET------>Database(SQL Server)--->Tables

A)Steps for Database-First Approach:
1) install the following packages:
-Microsoft.EntityFrameworkCore
-Microsoft.EntityFrameworkCore.SqlServer (specifically for MS Sql Server)

2) Define the Model classes to represent the tables
	public class Employee
	{
		public int Ecode {get;set;}
		public string Ename{get;set;}
		public int Salary{get;set;}
		public int Deptid{get;set;}
	}	

3) Define the Database Context class and use the above model to represent thru context
	public class EmpDbContext : DbContext
	{
		public EmpDbContext (DbContextOption<EmpDbContext > options) : base(options)
		{

		}
		public DbSet<Employee> tbl_employee{get;set;}
	}

database context is for connection with database server so it need connection string for the server.
DbContextOption<> can be used to configure different database configurations like connection string and it is done
in Program.cs file in the Main method

4) Using the step 3 DbContext we can interact with database for DML and queries using Linq
	we shud define repository pattern using interface and DAL class

	public interface IEmpDataAccess
	{
		//crud methods
		List<Employee> GetEmps();
	}
	public class EmpDataAccess : IEmpDataAccess
	{
		public List<Employee> GetEmps()
		{
			//LINQ for returning records
		}	
	}

5) Configure dependency injection for this DataAccesLayer class and inject this in the controller and use it
	--dependency injection is configured in Program.cs using few methods:
		a) builder.Services.AddSingleton
		b) builder.Services.AddScoped
		c) builder.Services.AddTransient
*Dependency injection is services which takes care of creating object instances and injection it into the application wherever it is 
needed. We inject in the constructor method. It is in-built feature of ASp.NET Core
	builder.Services.AddSingleton<IEmpDataAccess,EmpDataAccess>();



class EmployeeController : Controller
{
	private readonly IEmpDataAccess dal;
	public EmployeeController(IEmpDataAccess dal)
	{
		this.dal=dal;
	}
}

B) Code-First approach:- In this we define our model classes and context class, configure everything in program.cs file without having tables and database Then we run migration commands to generate tables and databses using scaffolding fetaure.

Steps:-
1) install the required following packages:
-Microsoft.EntityFrameworkCore ------for all database core components
-Microsoft.EntityFrameworkCore.SqlServer ----> for SQL Server database
-Microsoft.EntityFrameworkCore.Tools   :- for running migration commands
	
2) Define the model class and Context class and map to the tables using DbSet<>

3) Define the interface for DataAccessLayer class and code the crud methods as required
4) Configure dependency injection for DbContext and DataAccessLayer class in Program.cs file as done in DB first approach. Specify connection string also in AddDbContext().
5) To generate database and tables run migration commands:
	->Add-Migration  -Name "initial_create"  ----this will generated the C# code for creating the databse tables as per the current state of Models and context defined.
Note: Add-Migrate only generate C# code but does not create tables and database, we need to run another migration command for that:
	->Update-Database  -Migration "initial_create"	

6) further steps are same as db first approach i.e. inject the DAL class into controller and start using various operations.

Cardinality Ratio among Models:-
1:1
=============================
User--------->UserProfile

public class User
{
	public int Id{get;set;}
	public string UserName{get;set;}
	public UserProfile Profile{get;set;}
}


public class UserProfile
{
	public int Id{get;set;}
	public int UserId{get;set;}
	public string FullName {get;set;}
	public User User{get;set;}
}

1:M
===========================================
public class Order
{
	public int Id {get;set;}
	public DateTime OrderDate{get;set;}
	public List<OrderItem> Items{get;set;}
} 


public class OrderItem
{
	public int Id{get;set;}
	public int OrderId {get;set;}
	public string ProductName{get;set;}
	public int Quantity{get;set;}
	public Order Order{get;set;}
}

M:N
===================================
STUDENT--------Enrolls---------COURSE

public class Student
{
	public int Id{get;set;}
	public string Name {get;set;}
	public List<Enrollment> Enrollments{get;set;}
}

public class Enrollment
{
	public int StudentId{get;set;}
	public Student Student{get;set;}

	public int 	CourseId{get;set;}
	public Course Course{get;set;}

	public DateTime EnrollmentDate {get;set;}
}

public class Course
{
	public int Id{get;set;}
	public string Title{get;set;}
	public List<Enrollment> Enrollments{get;set;}	
}



=========Ways of regstering services using Dependency Injection container================
These ways specify the life-time and scope of the injected instances in the application. 
a) AddScoped():-   There will be only single instance maintined for as many injection is being done withing the single request.
b) AddTransient():- There will be a new instance created for every injection 
c) AddSingleton():- only instance will be maintained globally.

Note: Preferabily AddScoped is used for the componengts with per request session and AddTranisent is used for like stateless components for e.g logger, authentication, errorhandler  

=======================ASP.NET Core Web API==================
-It is a restful api over http protocol with some guideline as per restful features.
-Restful api have methods as per request headers like HTTPGET,HTTPPOST,HTTPPUT and HTTPDELETE
-Everything on the server is considered as a resource using url . Resource can be file, record in table, image etc
-These are stateless services
-Content negotiation:- web api services give response to the different types of clients in different formats like JSON,XML,Binary and Custom using MediaTypeFormatters component of the api.
ASP.NET Web api has by default XML and JSON mediatypeFormatter available.
If there requested format of response is not availble then a default response format is given.

-Dependency Injection
-Routing Services
-Authentication
-ErrorHandling
-Middlewares 
 
=======================Error handling in WEB API=============================
two ways to handle exception in api:-
1) Action level : use try/catch in action method
2) Global-error handling:- It is done using Middleware by configuring in Program.cs file

 public class GlobalExceptionHandler : IMiddleware
 {
     public async Task InvokeAsync(HttpContext context, RequestDelegate next)
     {
         try
         {
             await next(context);
         }
         catch (Exception ex)
         {
             ProblemDetails details = new ProblemDetails
             {
               Status=(int)System.Net.HttpStatusCode.InternalServerError,
               Detail="Some error occurred:" + ex.Message,
               Type="Server error",
               Title="Internal server error"
             };
             context.Response.ContentType = "application/json";
             await context.Response.WriteAsync(JsonSerializer.Serialize(details));
         }
     }
 }

--configure the GlobalExceptionHandler in Program.cs
builder.Services.AddScoped<GlobalExceptionHandler>();
---
app.UseMiddleware<GlobalExceptionHandler>();

-----------------------=========LINQ syntaxes=====================
LINQ :- Language Integrated Query for different types of source with the common programming model.
It supports two flavors of syntaxes:-
1) using operators :- select,from,orderby, group by and so on 
2) using extension methods with lambda operator









































 








































